method = "mse")
# Testy dopasowania
gof <- gofstat(fit)
# Sprawdzenie wartości p dla testów
chisq_test <- ifelse(gof$chisqpvalue < 0.05, "H0 odrzucona", "H0 nieodrzucona")
# Zwracamy zarówno estymowane p jak i wyniki testów
return(list(
p = fit$estimate["prob"],
chisq_result = chisq_test
))
}
# Stosujemy funkcję do danych
results <- mapply(fit_binomial_with_tests,
final_df[,c(2,3,5,6,7)],
360,
SIMPLIFY = FALSE)
# Przetwarzamy wyniki do data.frame
dwu_df1$p_fitdistr <- sapply(results, function(x) x$p)
dwu_df1$chisq_test <- sapply(results, function(x) x$chisq_result)
# Wyświetlamy wyniki
dwu_df1
r_neg_binom <- (stats_df$Średnia)^2 / (stats_df$Wariancja - stats_df$Średnia)
p_neg_binom <- stats_df$Średnia / stats_df$Wariancja
dwu_uj <- data.frame(
Line = names(means),
r = r_neg_binom,
p = p_neg_binom
)
dwu_uj
r_neg_binom <- (stats_df$Średnia)^2 / (stats_df$Wariancja - stats_df$Średnia)
p_neg_binom <- stats_df$Średnia / stats_df$Wariancja
dwu_uj <- data.frame(
Line = names(means),
r = r_neg_binom,
p = p_neg_binom
)
dwu_uj <- dwu_uj[c(3,7)]
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(foreign)
library(dplyr)
library(cowplot)
library(ggplot2)
library(readr)
library(readxl)
library(MASS)
library(fitdistrplus)
database <- read.csv("C:/Users/olgas/OneDrive/Documents/GitHub/Quantative-risk-models-summit/Model AMA/plik1.csv")
n <- data.frame(table(database$linia))
n
bus <- data.frame(table(database$rok[database$linia == "Buss_Distr"]))
com <- data.frame(table(database$rok[database$linia == "Com_Ban"]))
dam <- data.frame(table(database$rok[database$linia == "Damage"]))
empl <- data.frame(table(database$rok[database$linia == "Empl_Pract"]))
del <- data.frame(table(database$rok[database$linia == "Execut_Del"]))
ex <- data.frame(table(database$rok[database$linia == "External_Fr"]))
intr <- data.frame(table(database$rok[database$linia == "Internal_Fr"]))
colnames(bus) <- c("Year", "Buss_Distr")
colnames(com) <- c("Year", "Com_Ban")
colnames(dam) <- c("Year", "Damage")
colnames(empl) <- c("Year", "Empl_Pract")
colnames(del) <- c("Year", "Execut_Del")
colnames(ex) <- c("Year", "External_Fr")
colnames(intr) <- c("Year", "Internal_Fr")
df_list <- list(bus, com, dam, empl, del, ex, intr)
final_df <- Reduce(function(x, y) merge(x, y, by = "Year", all = TRUE), df_list)
final_df
numeric_df <- final_df[, -1]
means <- colMeans(numeric_df, na.rm = TRUE)
variances <- apply(numeric_df, 2, var, na.rm = TRUE)
stats_df <- data.frame(
Średnia = means,
Wariancja = variances,
Różnica = means - variances
)
stats_df
r_neg_binom <- (stats_df$Średnia)^2 / (stats_df$Wariancja - stats_df$Średnia)
p_neg_binom <- stats_df$Średnia / stats_df$Wariancja
dwu_uj <- data.frame(
Line = names(means),
r = r_neg_binom,
p = p_neg_binom
)
dwu_uj <- dwu_uj[c(3,7),]
fit_negbin_with_tests <- function(data) {
# Dopasowanie rozkładu ujemnego dwumianowego
fit <- fitdist(data, "nbinom",
method = "mse",
start = list(size = 1, mu = mean(data)))
gof <- gofstat(fit)
chisq_test <- ifelse(gof$chisqpvalue < 0.05, "H0 odrzucona", "H0 nieodrzucona")
return(list(
size = fit$estimate["size"],
mu = fit$estimate["mu"],
chisq_result = chisq_test
))
}
results <- mapply(fit_negbin_with_tests,
final_df[,c(4,8)],
SIMPLIFY = FALSE)
dwu_uj$size <- sapply(results, function(x) x$size)
dwu_uj$mu <- sapply(results, function(x) x$mu)
dwu_uj$chisq_test <- sapply(results, function(x) x$chisq_result)
dwu_uj
dwu_uj[,c(1,4,5)]
dwu_uj[,c(1,4,5,6)]
fit_poisson_simple <- function(data) {
fit <- fitdist(data, "pois", start = list(lambda = mean(data)))
gof <- gofstat(fit)
return(list(
lambda = fit$estimate,
chisq_test = ifelse(gof$chisqpvalue < 0.05,
"H0 odrzucona",
"H0 nieodrzucona")
))
}
# Stosujemy funkcję do danych
results <- mapply(fit_poisson_simple,
final_df[,c(5)],
SIMPLIFY = FALSE)
final_df[,c(5)]
fit_poisson_simple <- function(data) {
fit <- fitdist(data, "pois", start = lambda = mean(data))
fit_poisson_simple <- function(data) {
fit <- fitdist(data, "pois", start = (lambda = mean(data))
gof <- gofstat(fit)
fit_poisson_simple <- function(data) {
fit <- fitdist(data, "pois", start = (lambda = mean(data)))
gof <- gofstat(fit)
return(list(
lambda = fit$estimate,
chisq_test = ifelse(gof$chisqpvalue < 0.05,
"H0 odrzucona",
"H0 nieodrzucona")
))
}
# Stosujemy funkcję do danych
results <- mapply(fit_poisson_simple,
final_df[,c(5)],
SIMPLIFY = FALSE)
fit_poisson_simple <- function(data) {
fit <- fitdist(data, "pois", start = (lambda = mean(data)))
gof <- gofstat(fit)
return(list(
lambda = fit$estimate,
chisq_test = ifelse(gof$chisqpvalue < 0.05,
"H0 odrzucona",
"H0 nieodrzucona")
))
}
# Stosujemy funkcję do danych
results <- mapply(fit_poisson_simple,
as.numeric(final_df[,c(5)]),
SIMPLIFY = FALSE)
fit_poisson_simple <- function(data) {
fit <- fitdist(data, "pois", start = (lambda = mean(data)))
gof <- gofstat(fit)
return(list(
lambda = fit$estimate,
chisq_test = ifelse(gof$chisqpvalue < 0.05,
"H0 odrzucona",
"H0 nieodrzucona")
))
}
# Stosujemy funkcję do danych
results <- mapply(fit_poisson_simple,
final_df$Empl_Pract,
SIMPLIFY = FALSE)
type(final_df$Empl_Pract)
typeof(final_df$Empl_Pract)
fit_poisson_simple <- function(data) {
fit <- fitdist(data, "pois", start = (lambda = mean(data)))
gof <- gofstat(fit)
return(list(
lambda = fit$estimate,
chisq_test = ifelse(gof$chisqpvalue < 0.05,
"H0 odrzucona",
"H0 nieodrzucona")
))
}
# Stosujemy funkcję do danych
results <- mapply(fit_poisson_simple,
as.vector(final_df$Empl_Pract),
SIMPLIFY = FALSE)
fit_poisson_simple <- function(data) {
print(data)
fit <- fitdist(data, "pois", start = (lambda = mean(data)))
gof <- gofstat(fit)
return(list(
lambda = fit$estimate,
chisq_test = ifelse(gof$chisqpvalue < 0.05,
"H0 odrzucona",
"H0 nieodrzucona")
))
}
# Stosujemy funkcję do danych
results <- mapply(fit_poisson_simple,
as.vector(final_df$Empl_Pract),
SIMPLIFY = FALSE)
as.vector(final_df$Empl_Pract)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(foreign)
library(dplyr)
library(cowplot)
library(ggplot2)
library(readr)
library(readxl)
library(MASS)
library(fitdistrplus)
database <- read.csv("C:/Users/olgas/OneDrive/Documents/GitHub/Quantative-risk-models-summit/Model AMA/plik1.csv")
n <- data.frame(table(database$linia))
n
bus <- data.frame(table(database$rok[database$linia == "Buss_Distr"]))
com <- data.frame(table(database$rok[database$linia == "Com_Ban"]))
dam <- data.frame(table(database$rok[database$linia == "Damage"]))
empl <- data.frame(table(database$rok[database$linia == "Empl_Pract"]))
del <- data.frame(table(database$rok[database$linia == "Execut_Del"]))
ex <- data.frame(table(database$rok[database$linia == "External_Fr"]))
intr <- data.frame(table(database$rok[database$linia == "Internal_Fr"]))
colnames(bus) <- c("Year", "Buss_Distr")
colnames(com) <- c("Year", "Com_Ban")
colnames(dam) <- c("Year", "Damage")
colnames(empl) <- c("Year", "Empl_Pract")
colnames(del) <- c("Year", "Execut_Del")
colnames(ex) <- c("Year", "External_Fr")
colnames(intr) <- c("Year", "Internal_Fr")
df_list <- list(bus, com, dam, empl, del, ex, intr)
final_df <- Reduce(function(x, y) merge(x, y, by = "Year", all = TRUE), df_list)
final_df
numeric_df <- final_df[, -1]
means <- colMeans(numeric_df, na.rm = TRUE)
variances <- apply(numeric_df, 2, var, na.rm = TRUE)
stats_df <- data.frame(
Średnia = means,
Wariancja = variances,
Różnica = means - variances
)
stats_df
r_neg_binom <- (stats_df$Średnia)^2 / (stats_df$Wariancja - stats_df$Średnia)
p_neg_binom <- stats_df$Średnia / stats_df$Wariancja
dwu_uj <- data.frame(
Line = names(means),
r = r_neg_binom,
p = p_neg_binom
)
dwu_uj <- dwu_uj[c(3,7),]
fit_negbin_with_tests <- function(data) {
# Dopasowanie rozkładu ujemnego dwumianowego
fit <- fitdist(data, "nbinom",
method = "mse",
start = list(size = 1, mu = mean(data)))
gof <- gofstat(fit)
chisq_test <- ifelse(gof$chisqpvalue < 0.05, "H0 odrzucona", "H0 nieodrzucona")
return(list(
size = fit$estimate["size"],
mu = fit$estimate["mu"],
chisq_result = chisq_test
))
}
results <- mapply(fit_negbin_with_tests,
final_df[,c(4,8)],
SIMPLIFY = FALSE)
dwu_uj$size <- sapply(results, function(x) x$size)
dwu_uj$mu <- sapply(results, function(x) x$mu)
dwu_uj$chisq_test <- sapply(results, function(x) x$chisq_result)
dwu_uj[,c(1,4,5,6)]
N = (stats_df$Średnia)^2/ (stats_df$Różnica)
dwu_df <- data.frame(
Line = names(means),
n = round(N, 0),
p = (stats_df$Średnia)/ N
)
dwu_df1 <- dwu_df[c(1,2,4,5,6),]
fit_binomial_with_tests <- function(data, n) {
fit <- fitdist(data, "binom",
start = list(prob = 0.5),
fix.arg = list(size = n),
method = "mse")
# Testy dopasowania
gof <- gofstat(fit)
# Sprawdzenie wartości p dla testów
chisq_test <- ifelse(gof$chisqpvalue < 0.05, "H0 odrzucona", "H0 nieodrzucona")
# Zwracamy zarówno estymowane p jak i wyniki testów
return(list(
p = fit$estimate["prob"],
chisq_result = chisq_test
))
}
# Stosujemy funkcję do danych
results <- mapply(fit_binomial_with_tests,
final_df[,c(2,3,5,6,7)],
360,
SIMPLIFY = FALSE)
# Przetwarzamy wyniki do data.frame
dwu_df1$p_fitdistr <- sapply(results, function(x) x$p)
dwu_df1$chisq_test <- sapply(results, function(x) x$chisq_result)
# Wyświetlamy wyniki
dwu_df1
fit_poisson_simple <- function(data) {
print(data)
fit <- fitdist(data, "pois", start = (lambda = mean(data)))
gof <- gofstat(fit)
return(list(
lambda = fit$estimate,
chisq_test = ifelse(gof$chisqpvalue < 0.05,
"H0 odrzucona",
"H0 nieodrzucona")
))
}
# Stosujemy funkcję do danych
results <- mapply(fit_poisson_simple,
as.vector(final_df$Empl_Pract),
SIMPLIFY = FALSE)
as.vector(final_df$Empl_Pract)
fit_poisson_simple <- function(data) {
print(data)
fit <- fitdist(data, "pois", start = (lambda = mean(data)))
gof <- gofstat(fit)
return(list(
lambda = fit$estimate,
chisq_test = ifelse(gof$chisqpvalue < 0.05,
"H0 odrzucona",
"H0 nieodrzucona")
))
}
# Stosujemy funkcję do danych
results <- mapply(fit_poisson_simple,
as.vector(final_df$Empl_Pract),
SIMPLIFY = FALSE)
fit_poisson_simple <- function(data) {
print(data)
fit <- fitdist(data, "pois", start = (lambda = mean(data)))
gof <- gofstat(fit)
return(list(
lambda = fit$estimate,
chisq_test = ifelse(gof$chisqpvalue < 0.05,
"H0 odrzucona",
"H0 nieodrzucona")
))
}
# Stosujemy funkcję do danych
results <- fit_poisson_simple(
as.vector(final_df$Empl_Pract)
)
fit_poisson_simple <- function(data) {
print(data)
fit <- fitdist(data, "pois", start = list(lambda = mean(data)))
gof <- gofstat(fit)
return(list(
lambda = fit$estimate,
chisq_test = ifelse(gof$chisqpvalue < 0.05,
"H0 odrzucona",
"H0 nieodrzucona")
))
}
# Stosujemy funkcję do danych
results <- fit_poisson_simple(
as.vector(final_df$Empl_Pract)
)
dw_po <- data.frame(
Line <- "Empl_Prac",
lambda <- results$lambda,
chisq_test <- results$chisq_test
)
typeof(final_df$Empl_Pract)
as.vector(final_df$Empl_Pract)
dw_po
dw_po <- data.frame(
Line = "Empl_Prac",
lambda = results$lambda,
chisq_test = results$chisq_test
)
dw_po
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(foreign)
library(dplyr)
library(cowplot)
library(ggplot2)
library(readr)
library(readxl)
library(MASS)
library(fitdistrplus)
database <- read.csv("C:/Users/olgas/OneDrive/Documents/GitHub/Quantative-risk-models-summit/Model AMA/plik1.csv")
n <- data.frame(table(database$linia))
n
bus <- data.frame(table(database$rok[database$linia == "Buss_Distr"]))
com <- data.frame(table(database$rok[database$linia == "Com_Ban"]))
dam <- data.frame(table(database$rok[database$linia == "Damage"]))
empl <- data.frame(table(database$rok[database$linia == "Empl_Pract"]))
del <- data.frame(table(database$rok[database$linia == "Execut_Del"]))
ex <- data.frame(table(database$rok[database$linia == "External_Fr"]))
intr <- data.frame(table(database$rok[database$linia == "Internal_Fr"]))
colnames(bus) <- c("Year", "Buss_Distr")
colnames(com) <- c("Year", "Com_Ban")
colnames(dam) <- c("Year", "Damage")
colnames(empl) <- c("Year", "Empl_Pract")
colnames(del) <- c("Year", "Execut_Del")
colnames(ex) <- c("Year", "External_Fr")
colnames(intr) <- c("Year", "Internal_Fr")
df_list <- list(bus, com, dam, empl, del, ex, intr)
final_df <- Reduce(function(x, y) merge(x, y, by = "Year", all = TRUE), df_list)
final_df
numeric_df <- final_df[, -1]
means <- colMeans(numeric_df, na.rm = TRUE)
variances <- apply(numeric_df, 2, var, na.rm = TRUE)
stats_df <- data.frame(
Średnia = means,
Wariancja = variances,
Różnica = means - variances
)
stats_df
r_neg_binom <- (stats_df$Średnia)^2 / (stats_df$Wariancja - stats_df$Średnia)
p_neg_binom <- stats_df$Średnia / stats_df$Wariancja
dwu_uj <- data.frame(
Line = names(means),
r = r_neg_binom,
p = p_neg_binom
)
dwu_uj <- dwu_uj[c(3,7),]
fit_negbin_with_tests <- function(data) {
# Dopasowanie rozkładu ujemnego dwumianowego
fit <- fitdist(data, "nbinom",
method = "mse",
start = list(size = 1, mu = mean(data)))
gof <- gofstat(fit)
chisq_test <- ifelse(gof$chisqpvalue < 0.05, "H0 odrzucona", "H0 nieodrzucona")
return(list(
size = fit$estimate["size"],
mu = fit$estimate["mu"],
chisq_result = chisq_test
))
}
results <- mapply(fit_negbin_with_tests,
final_df[,c(4,8)],
SIMPLIFY = FALSE)
dwu_uj$size <- sapply(results, function(x) x$size)
dwu_uj$mu <- sapply(results, function(x) x$mu)
dwu_uj$chisq_test <- sapply(results, function(x) x$chisq_result)
dwu_uj[,c(1,4,5,6)]
N = (stats_df$Średnia)^2/ (stats_df$Różnica)
dwu_df <- data.frame(
Line = names(means),
n = round(N, 0),
p = (stats_df$Średnia)/ N
)
dwu_df1 <- dwu_df[c(1,2,4,5,6),]
fit_binomial_with_tests <- function(data, n) {
fit <- fitdist(data, "binom",
start = list(prob = 0.5),
fix.arg = list(size = n),
method = "mse")
# Testy dopasowania
gof <- gofstat(fit)
# Sprawdzenie wartości p dla testów
chisq_test <- ifelse(gof$chisqpvalue < 0.05, "H0 odrzucona", "H0 nieodrzucona")
# Zwracamy zarówno estymowane p jak i wyniki testów
return(list(
p = fit$estimate["prob"],
chisq_result = chisq_test
))
}
# Stosujemy funkcję do danych
results <- mapply(fit_binomial_with_tests,
final_df[,c(2,3,5,6,7)],
360,
SIMPLIFY = FALSE)
# Przetwarzamy wyniki do data.frame
dwu_df1$p_fitdistr <- sapply(results, function(x) x$p)
dwu_df1$chisq_test <- sapply(results, function(x) x$chisq_result)
# Wyświetlamy wyniki
dwu_df1
fit_poisson_simple <- function(data) {
print(data)
fit <- fitdist(data, "pois", start = list(lambda = mean(data)))
gof <- gofstat(fit)
return(list(
lambda = fit$estimate,
chisq_test = ifelse(gof$chisqpvalue < 0.05,
"H0 odrzucona",
"H0 nieodrzucona")
))
}
# Stosujemy funkcję do danych
results <- fit_poisson_simple(
as.vector(final_df$Empl_Pract)
)
dw_po <- data.frame(
Line = "Empl_Prac",
lambda = results$lambda,
chisq_test = results$chisq_test
)
dw_po
fit_geometric_simple <- function(data) {
print(data)
fit <- fitdist(data, "geom", method = "mle")
gof <- gofstat(fit)
return(list(
prob = fit$estimate["prob"],  # Parametr rozkładu geometrycznego
chisq_test = ifelse(gof$chisqpvalue < 0.05,
"H0 odrzucona",
"H0 nieodrzucona")
))
}
results <- fit_geometric_simple(
as.vector(final_df$Empl_Pract)
)
dw_geom <- data.frame(
Line = "Empl_Prac",
prob = results$prob,
chisq_test = results$chisq_test
)
# Wyświetlamy wyniki
print(dw_geom)
